[{"name": "app.py", "content": "import shinyswatch\nimport re\nimport pandas as pd\nimport numpy as np\n\nfrom shiny import *\n\napp_ui = ui.page_navbar(\n    shinyswatch.theme.superhero(),\n    ui.nav(\n        \"File Upload\",\n        ui.panel_title(\"File Upload and Validation\"),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"Choose a file to upload:\", multiple=True),\n            ),\n            ui.panel_main(\n                ui.h4(\"Result:\"),\n                ui.output_text_verbatim(\"fileStatus\"),\n            ),\n        ),\n        ui.h2(\"Tables\"),\n        ui.navset_tab(\n            ui.nav(\n                \"Standard Curve Table\",\n                ui.h4(\"Standard Curve: \"),\n                ui.output_table(\"table1\"),\n            ),\n            ui.nav(\n                \"Standard Curve Summary Table\",\n                ui.h4(\"Standard Curve Summary: \"),\n                ui.output_table(\"table2\"),\n            ),\n        ),\n    ),\n    ui.nav(\n        \"Standard Curve Check\",\n        ui.h3(\"Check Target Genes of SARS\"),\n        ui.output_text_verbatim(\"targetcheck\"),\n        ui.h3(\"Check Value in Con_std and Ct \"),\n        ui.h4(\"Empty Values:\"),\n        ui.output_table(\"empty\"),\n        ui.h4(\"Column data types:\"),\n        ui.output_text_verbatim(\"typecheck\"),\n        ui.h6(\"*Note: If not in float64 please change it to number type\"),\n        ui.h3(\"Check Minimum 5 diffenrent Con_std and Max 3 False indicaters\"),\n        ui.output_table(\"diffgcheck\"),\n        ui.output_table(\"diffcheck\"),\n        ui.h3(\"Check standard deviation between Cts > 0.5:\"),\n        ui.output_table(\"sdcheck\"),\n        ui.h3(\"Check R^2 < 0.98:\"),\n        ui.output_table(\"r2check\"),\n        ui.h3(\"Check Efficiency not in 90%-110%:\"),\n        ui.output_table(\"effcheck\"),\n        ui.h3(\"Check # of SC from Standard Curve tab is the same \"),\n        ui.output_text_verbatim(\"sccheck\"),\n    ),\n    title=\"Check!\",\n)\n\n\ndef server(input, output, session):\n    # Function to validate the correctness of a file name\n    def validateFileName(file_name):\n        \"\"\"\n        Validate the correctness of a file name.\n        Returns True if the file name is valid, False otherwise.\n        \"\"\"\n        # File name pattern: starts with a LabId number and end with _raw.xlsx\n        pattern = r\"^\\d.*_raw\\.xlsx$\"\n        return re.match(pattern, file_name) is not None\n\n    @output\n    @render.text\n    def fileStatus():\n        # file_infos is a list of dicts; each dict represents one file. Example:\n        # [\n        #   {\n        #     'name': 'data.csv',\n        #     'size': 2601,\n        #     'type': 'text/csv',\n        #     'datapath': '/tmp/fileupload-1wnx_7c2/tmpga4x9mps/0.csv'\n        #   }\n        # ]\n\n        file_infos = input.file()\n        file_name = file_infos[0][\"name\"]\n\n        if validateFileName(file_name):\n            return \"File name is correct.\"\n\n        # Invalid file name\n        else:\n            return \"Invalid file name. File name should start with a LabID number and end with _raw.xlsx.\"\n\n    # Function to read standard curve table\n    def std_table():\n        file_infos = input.file()\n        file_name = file_infos[0][\"name\"]\n\n        if validateFileName(file_name):\n            path = input.file()[0][\"datapath\"]\n            # Read excel and set row 7 as header\n            raw_std = pd.read_excel(path, 3, 6)\n            # keep the wanted rows and columns and remove empty rows\n            std = raw_std.iloc[1:, 1:].dropna(subset=[\"Target\"])\n        return std\n\n    @output\n    @render.table()\n    # Dispaly the Excel table\n    def table1():\n        return std_table()\n\n    def summary_table():\n        file_infos = input.file()\n        file_name = file_infos[0][\"name\"]\n\n        if validateFileName(file_name):\n            path = input.file()[0][\"datapath\"]\n            # Read excel and set row 3 as header\n            raw_summary = pd.read_excel(path, 5, 2)\n            # keep the wanted rows and columns and remove empty rows\n            summary = raw_summary.iloc[1:, 1:].dropna(subset=[\"Target\"])\n        return summary\n\n    @output\n    @render.table()\n    # Dispaly the Excel table\n    def table2():\n        return summary_table()\n\n    @output\n    @render.text()\n    def targetcheck():\n        std = std_table()\n\n        # Check if 'N1' or 'N2' is present in the 'Target_Gene(s)' column for SARS\n        sars = std[std[\"Target\"] == \"SARS-CoV-2\"]\n        is_n1_n2_present = sars[\"Target_Gene(s)\"].str.contains(\"N1|N2\").any()\n\n        if is_n1_n2_present:\n            return \"The 'Target_Gene(s)' column of SARS contains 'N1' or 'N2'.\"\n        else:\n            return \"The 'Target_Gene(s)' column does SARS not contain 'N1' or 'N2'.\"\n\n    @output\n    @render.text()\n    def typecheck():\n        std = std_table()\n        # Check values are present in Con_std and Ct and is number\n        column = [\n            \"Technical_Replicate_1_CycleNo\",\n            \"Technical_Replicate_2_CycleNo\",\n            \"Technical_Replicate_3_CycleNo\",\n            \"Conc_std (for Standard Curves)\",]\n        \n        return std[column].dtypes\n    \n    @output\n    @render.table()\n    def empty():\n        std = std_table()\n        # Check values are present in Con_std and Ct\n        column = [\n            \"Technical_Replicate_1_CycleNo\",\n            \"Technical_Replicate_2_CycleNo\",\n            \"Technical_Replicate_3_CycleNo\",\n            \"Conc_std (for Standard Curves)\",]\n        \n        return std.loc[std[column].isna().any(axis=1)]\n    \n    def newvalue(column):\n        std = std_table()\n\n        amount = []\n        false_count = []\n        target = []\n\n        grouped = std.groupby(column)\n        for group, group_data in grouped:\n            target.append(group)\n            amount.append(group_data[\"Conc_std (for Standard Curves)\"].nunique())\n            indicators_sum = group_data[['Indicator_TR1', 'Indicator_TR2', 'Indicator_TR3']].sum(axis=1)\n            false_count.append((indicators_sum !=3).sum())\n        return amount,false_count,target\n\n\n    @output\n    @render.table()\n    def diffgcheck():\n        # Check Minimum 5 diffenrent Con_std in each Target_Genes for Target, and only up 3 indicater can be FALSE in total 15 points\n\n        # Create a empty dataframe to store amount and false_count\n        df_g = pd.DataFrame()\n\n        ## For different genens\n        amount_g,false_count_g,target_g = newvalue([\"Target\", \"Target_Gene(s)\"])\n\n        # Add dataframe\n        df_g['Target Gene'] = target_g\n        df_g['Different Amount Gene'] = amount_g\n        df_g['False Indicator Count Gene'] = false_count_g\n\n        return df_g[(df_g[\"Different Amount Gene\"]<5)|(df_g[\"False Indicator Count Gene\"]>3)]\n        \n    @output\n    @render.table()\n    def diffcheck():\n        df = pd.DataFrame()\n\n        ## For Target group not consider different genes\n        amount,false_count,target = newvalue([\"Target\"])\n        \n        df['Target'] = target\n        df['Different Amount'] = amount\n        df['False Indicator Count'] = false_count\n\n        return df[(df[\"Different Amount\"]<5)|(df[\"False Indicator Count\"]>3)]\n\n\n    @output\n    @render.table()\n    def sdcheck():\n        # Check Above 10 gc/ml, sd of Ct between three TR <0.5\n        std = std_table()\n        sd = std[\n            [\n                \"Technical_Replicate_1_CycleNo\",\n                \"Technical_Replicate_2_CycleNo\",\n                \"Technical_Replicate_3_CycleNo\",\n            ]\n        ].std(axis=1)\n        std_copy = std.copy()\n        std_copy[\"sd\"] = sd\n\n        filtered_data = std_copy[(std_copy[\"Conc_std (for Standard Curves)\"] > 10)]\n        Error = filtered_data[filtered_data[\"sd\"] > 0.5]\n        return Error[\n            [\n                \"Target\",\n                \"Target_Gene(s)\",\n                \"Technical_Replicate_1_CycleNo\",\n                \"Technical_Replicate_2_CycleNo\",\n                \"Technical_Replicate_3_CycleNo\",\n                \"Conc_std (for Standard Curves)\",\n                \"sd\",\n            ]\n        ]\n\n    @output\n    @render.table()\n    def r2check():\n        # Check R^2 in the range\n        summary = summary_table()\n        Error = summary[summary[\"R2\"] <= 0.97]\n        return Error[[\"Target\", \"Target_Gene(s)\", \"R2\"]]\n\n    @output\n    @render.table()\n    def effcheck():\n        # Check Efficiency in the range 90% -110%\n        summary = summary_table()\n        Error = summary[\n            (summary[\"Efficiency (%)\"] < 90) & (summary[\"Efficiency (%)\"] > 110)\n        ]\n        return Error[[\"Target\", \"Target_Gene(s)\", \"Efficiency (%)\", \"Slope\"]]\n\n    @output\n    @render.text()\n    def sccheck():\n        std = std_table()\n        summary = summary_table()\n        # Check # of SC from \u00e2\u20ac\u02dcStandard Curve\u00e2\u20ac\u2122 tab is the same\n        if (std[\"Target\"].nunique() == summary[\"Target\"].nunique()) and (\n            std[\"Target_Gene(s)\"].nunique() == summary[\"Target_Gene(s)\"].nunique()\n        ):\n            return \"Same number of SC in Standard Curve and Summary\"\n        else:\n            return \"Error: Number of SC not same in Standard Curve and Summary!\"\n\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "requirements.txt", "content": "shinyswatch\nopenpyxl", "type": "text"}]