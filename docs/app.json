[{"name": "app.py", "content": "import re\n\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"File Upload and Validation\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_file(\"file\", \"Choose a file to upload:\", multiple=True),\n        ),\n    \n        ui.panel_main(\n            ui.output_text_verbatim(\"fileStatus\"),\n        )\n    )\n)\n\n\ndef server(input, output, session):\n\n    @output\n    @render.text()        \n    def fileStatus():\n                # file_infos is a list of dicts; each dict represents one file. Example:\n        # [\n        #   {\n        #     'name': 'data.csv',\n        #     'size': 2601,\n        #     'type': 'text/csv',\n        #     'datapath': '/tmp/fileupload-1wnx_7c2/tmpga4x9mps/0.csv'\n        #   }\n        # ]\n        \n        file_infos = input.file()\n        file_name = file_infos[0]['name']\n        \n        if validateFileName(file_name):\n            return \"File name is correct.\"\n            \n        # Invalid file name\n        else:\n            return \"Invalid file name! File name should start with a LabID number and end with _raw.xlsx.\"\n                \n    # Function to validate the correctness of a file name\n    def validateFileName(file_name):\n        \"\"\"\n        Validate the correctness of a file name.\n        Returns True if the file name is valid, False otherwise.\n        \"\"\"\n        # File name pattern: starts with a LabId number and end with _raw.xlsx\n        pattern = r'^\\d.*_raw\\.xlsx$'\n        return re.match(pattern,file_name) is not None\n\napp = App(app_ui, server)\n", "type": "text"}]